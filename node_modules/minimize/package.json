{
  "_args": [
    [
      {
        "raw": "minimize@^2.1.0",
        "scope": null,
        "escapedName": "minimize",
        "name": "minimize",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "G:\\Project\\collectionApp\\node_modules\\grunt-minify-html"
    ]
  ],
  "_from": "minimize@>=2.1.0 <3.0.0",
  "_id": "minimize@2.1.0",
  "_inCache": true,
  "_location": "/minimize",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/minimize-2.1.0.tgz_1488967223740_0.08496835408732295"
  },
  "_npmUser": {
    "name": "swaagie",
    "email": "info@martijnswaagman.nl"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "domelementtype": "1.3.0",
    "domhandler": "2.3.0",
    "domutils": "1.5.1",
    "inherits": "2.0.3",
    "lodash": "4.17.4",
    "readable-stream": "2.1.5"
  },
  "_requested": {
    "raw": "minimize@^2.1.0",
    "scope": null,
    "escapedName": "minimize",
    "name": "minimize",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/grunt-minify-html"
  ],
  "_resolved": "https://registry.npmjs.org/minimize/-/minimize-2.1.0.tgz",
  "_shasum": "fa277647fc5f9a21524bfde62814ca7ce1ffd7a2",
  "_shrinkwrap": null,
  "_spec": "minimize@^2.1.0",
  "_where": "G:\\Project\\collectionApp\\node_modules\\grunt-minify-html",
  "author": {
    "name": "Martijn Swaagman"
  },
  "bin": {
    "minimize": "./bin/minimize"
  },
  "bugs": {
    "url": "https://github.com/Moveo/minimize/issues"
  },
  "dependencies": {
    "argh": "^0.1.4",
    "async": "^2.1.5",
    "cli-color": "^1.2.0",
    "diagnostics": "^1.1.0",
    "emits": "^3.0.0",
    "htmlparser2": "^3.9.2",
    "uuid": "^3.0.0"
  },
  "description": "Minimize HTML",
  "devDependencies": {
    "chai": "^3.5.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0",
    "pre-commit": "^1.2.2",
    "sinon": "^1.17.7",
    "sinon-chai": "^2.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "fa277647fc5f9a21524bfde62814ca7ce1ffd7a2",
    "tarball": "https://registry.npmjs.org/minimize/-/minimize-2.1.0.tgz"
  },
  "gitHead": "67713aa6182941edb53f24598b700349812fb8d5",
  "homepage": "https://github.com/Moveo/minimize#readme",
  "keywords": [
    "minify",
    "minimize",
    "HTML"
  ],
  "license": "MIT",
  "main": "./lib/minimize",
  "maintainers": [
    {
      "name": "swaagie",
      "email": "info@martijnswaagman.nl"
    }
  ],
  "name": "minimize",
  "optionalDependencies": {},
  "readme": "# HTML minifier\n\n[![Version npm][version]](http://browsenpm.org/package/minimize)[![Build Status][build]](https://travis-ci.org/Swaagie/minimize)[![Dependencies][david]](https://david-dm.org/Swaagie/minimize)[![Coverage Status][cover]](https://coveralls.io/r/Swaagie/minimize?branch=master)\n\n[version]: http://img.shields.io/npm/v/minimize.svg?style=flat-square\n[build]: http://img.shields.io/travis/Swaagie/minimize/master.svg?style=flat-square\n[david]: https://img.shields.io/david/Swaagie/minimize.svg?style=flat-square\n[cover]: http://img.shields.io/coveralls/Swaagie/minimize/master.svg?style=flat-square\n\nMinimize is a HTML minifier based on the node-htmlparser. This depedency will\nensure output is solid and correct. Minimize is focussed on HTML5 and will not\nsupport older HTML drafts. It is not worth the effort and the web should move\nforward. Currently, HTML minifier is only usuable server side. Client side\nminification will be added in a future release.\n\n**Minimize does not parse inline PHP or raw template files. Templates are not valid\nHTML and this is outside the scope of the minimize. The _output_ of the\ntemplaters should be parsed and minified.**\n\n## Features\n\n- fast and stable HTML minification (no inline PHP or templates)\n- highly configurable\n- CLI interface usable with stdin and files\n- can distinguish conditional IE comments and/or SSI\n- build on the foundations of [htmlparser2][fb55]\n- pluggable interface that allows to hook into each element\n\n## Usage\n\nTo get the minified content make sure to provide a callback. Optional an options\nobject can be provided. All options are listed below and `false` per default.\n\n```js\nvar Minimize = require('minimize')\n  , content = new Minimize().parse(content);\n\nconsole.log(content);\n```\n\n#### Asynchronous usage\n\nSimply pass a callback as second argument. This is relevant is plugins perform\nasynchronous operations.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize();\n\nminimize.parse(content, function (error, data) {\n  console.log(data);\n});\n```\n\n#### Options\n\nList of available options. Note that all options are set to `false` by default and\nneed to be explicitly enabled by providing `true`. For example `empty: true`.\n\n- [empty](#empty)\n- [cdata](#cdata)\n- [comments](#comments)\n- [ssi](#server-side-includes-ssi)\n- [conditionals](#conditionals)\n- [spare](#spare)\n- [quotes](#quotes)\n- [loose](#loose)\n- [dom](#dom)\n  - xmlMode\n  - lowerCaseAttributeNames\n  - lowerCaseTags\n\n#### Custom parser\n\nSupplying a custom instance to do the HTML parsing is possible. I.e. this can\nbe useful if the HTML contains SVG or if you need to specific options to the parser.\n\n```js\nvar Minimize = require('minimize')\n  , html = require('htmlparser2')\n  , minimize = new Minimize(\n      new html.Parser(\n        new html.FeedHandler(minimize.emits('read')),\n        { /* options */ }\n      )\n    );\n\nminimize.parse(content, function (error, data) {\n  console.log(data);\n});\n```\n\n## Options\n\n###### Empty\n\nEmpty attributes can usually be removed, by default all are removed, excluded\nHTML5 _data-*_ and microdata attributes. To retain empty elements regardless\nvalue, do:\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ empty: true });\n\nminimize.parse(\n  '<h1 id=\"\"></h1>',\n  function (error, data) {\n    // data output: <h1 id=\"\"></h1>\n  }\n);\n```\n\n###### CDATA\n\nCDATA is only required for HTML to parse as valid XML. For normal webpages this\nis rarely the case, thus CDATA around javascript can be omitted. By default\nCDATA is removed, if you would like to keep it, pass true:\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ cdata: true });\n\nminimize.parse(\n  '<script type=\"text/javascript\">\\n//<![CDATA[\\n...code...\\n//]]>\\n</script>',\n  function (error, data) {\n    // data output: <script type=text/javascript>//<![CDATA[\\n...code...\\n//]]></script>\n  }\n);\n```\n\n###### Comments\n\nComments inside HTML are usually beneficial while developing. Hiding your\ncomments in production is sane, safe and will reduce data transfer. If you\nensist on keeping them, fo1r instance to show a nice easter egg, set the option\nto true. Keeping comments will also retain any Server Side Includes or\nconditional IE statements.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ comments: true });\n\nminimize.parse(\n  '<!-- some HTML comment -->\\n     <div class=\"slide nodejs\">',\n  function (error, data) {\n    // data output: <!-- some HTML comment --><div class=\"slide nodejs\">\n  }\n);\n```\n\n###### Server Side Includes (SSI)\n\nServer side includes are special set of commands that are support by several\nweb servers. The markup is very similar to regular HTML comments. Minimize can\nbe configured to retain SSI comments.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ ssi: true });\n\nminimize.parse(\n  '<!--#include virtual=\"../quote.txt\" -->\\n     <div class=\"slide nodejs\">',\n  function (error, data) {\n    // data output: <!--#include virtual=\"../quote.txt\" --><div class=\"slide nodejs\">\n  }\n);\n```\n\n###### Conditionals\n\nConditional comments only work in IE, and are thus excellently suited to give\nspecial instructions meant only for IE. Minimize can be configured to retain\nthese comments. But since the comments are only working until IE9 (inclusive)\nthe default is to remove the conditionals.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ conditionals: true });\n\nminimize.parse(\n  \"<!--[if ie6]>Cover microsofts' ass<![endif]-->\\n<br>\",\n  function (error, data) {\n    // data output: <!--[if ie6]>Cover microsofts' ass<![endif]-->\\n<br>\n  }\n);\n```\n\n###### Spare\n\nSpare attributes are of type boolean of which the value can be omitted in HTML5.\nTo keep attributes intact for support of older browsers, supply:\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ spare: true });\n\nminimize.parse(\n  '<input type=\"text\" disabled=\"disabled\"></h1>',\n  function (error, data) {\n    // data output: <input type=text disabled=disabled></h1>\n  }\n);\n```\n\n###### Quotes\n\nQuotes are always added around attributes that have spaces or an equal sign in\ntheir value. But if you require quotes around all attributes, simply pass\nquotes:true, like below.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ quotes: true });\n\nminimize.parse(\n  '<p class=\"paragraph\" id=\"title\">\\n    Some content\\n  </p>',\n  function (error, data) {\n    // data output: <p class=\"paragraph\" id=\"title\">Some content</p>\n  }\n);\n```\n\n###### Loose\n\nMinimize will only keep whitespaces in structural elements and remove all other\nredundant whitespaces. This option is useful if you need whitespace to keep the\nflow between text and input elements. Downside: whitespaces or newlines after\nblock level elements will also have one trailing whitespace.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ loose: true });\n\nminimize.parse(\n  '<h1>title</h1>  <p class=\"paragraph\" id=\"title\">\\n  content\\n  </p>    ',\n  function (error, data) {\n    // data output: <h1>title</h1> <p class=\"paragraph\" id=\"title\"> content </p> '\n  }\n);\n```\n\n###### dom\n\nMinimize use !(htmlparser2)[https://github.com/fb55/htmlparser2] to parse the dom. The `dom` option permit to customize htmlparser2.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ dom: { lowerCaseAttributeNames: false }});\n\nminimize.parse(\n  '<a *ngIf=\"bool\">link</a>',\n  function (error, data) {\n    // data output: <a *ngIf=bool>link</a> '\n  }\n);\n```\n\n## Plugins\n\nRegister a set of plugins that will be ran on each iterated element. Plugins\nare ran in order, errors will stop the iteration and invoke the completion\ncallback.\n\n```js\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ plugins: [{\n      id: 'remove',\n      element: function element(node, next) {         // callback is optional\n        if (node.type === 'text') delete node.data;\n        next();\n      }\n    }]});\n\nminimize.parse(\n  '<h1>title</h1>',\n  function (error, data) {\n    // data output: <h1></h1>\n  }\n);\n```\n\n**Note:** plugins have no control over the flow of minimize. The DOM\nstructure that is parsed by [htmlparser2][fb55] is asynchronously reduced.\nEach element is handed of to the plugin `element` method. Thus, plugins\nhave full control over properties of each `node` as objects always have\nreference in javascript.\n\n#### Available plugins\n\n- [uglifyjs](https://www.npmjs.com/package/minimize-plugin-uglifyjs): minify script content\n- [handlebars](https://www.npmjs.com/package/minimize-handlebars-attribs): allow handlebar template tags\n\n## Tests\n\nTests can be easily run by using either of the following commands. Travis.ci is\nused for continous integration.\n\n```bash\nmake test\nmake test-watch\nnpm test\n```\n\n## Benchmarks\n\n\n## Credits\nMinimize is influenced by the [HTML minifier][kangax] of kangax. This module\nparses the DOM as string as opposes to an object. However, retaining flow is more\ndiffucult if the DOM is parsed sequentially. Minimize is not client-side ready.\nKangax minifier also provides some additional options like linting. Minimize\nwill retain strictly to the business of minifying. Minimize is already used in\nproduction by [Nodejitsu][nodejitsu].\n\n[node-htmlparser][fb55] of fb55 is used to create an object representation\nof the DOM.\n\n[kangax]: https://github.com/kangax/html-minifier/\n[fb55]: https://github.com/fb55/htmlparser2\n[nodejitsu]: http://www.nodejitsu.com/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Moveo/minimize.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- $(find test -name '*.test.js')",
    "test": "mocha $(find test -name '*.test.js')",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- $(find test -name '*.test.js')",
    "watch": "mocha --watch $(find test -name '*.test.js')"
  },
  "version": "2.1.0"
}
